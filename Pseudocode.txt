
Landing page - just sign in
Sign in/sign up - use Auth0, collect user's data and push to back end. 

├── components
├── sign in (no nav bar)
│   ├── Landing page/Auth0 
│   ├─────  after sign in with Auth0, to extract name, profile image, store in database
│   ├── User_category
│   ├─────  create a new page for user to choose if he is a talent or employer. store in dabase
│   ├─────  redirect to profile + show nav bar

3. Upon sign in, then the nav bar (with the same 4 icons for both employer and talent) will appear. User should only be at either talent/employer route. It's not interchangable - throughout the journey. 

Navigation

- standardise naming convention of the URL (frontend)
- pass catergory into the url to navigate the pages.

<------with nav bar------>

├── employers
│   ├── Dashboard (see active job listings, job listings with applications)
│   ├── EmJoblists - Job listings (employer can add/delete job listings on this page too)
│   ├── Employer's profile page 
├── talents
│   ├── Talent Dashboard - view available job listings 
│   ├── list of applications status 
│   ├── Profile

├── Chat (1 function by itself, share with both employer and talents)


Talent 

New user 
- 1st landing page profile view to create profile

Existing user 
- log in: view job listings 
- be able to add, edit and delete data.
- sync benefits, always show benefits to them when log in

<--------------Job Listings-------------->

- the router is connected to employer's database, backend router to be with employer side. 
- create "get" request for job listings 
- pull job listings from employer page.
- add seeders to job listings 
- to map "benefits" to user's career priorities 
---- maybe use map/hashmap to pull "beneits id" 
---- then include/associate to job listings 
- show job's listing data to users
-- pull out the following data 
---- employer name 
---- job title 
---- job description 
---- job_responsibility
---- skill set
---- company benefits
---- application start data and end date 
- create floating buttons 
--- "x" to move on to the next
--- "like" to applied
- a user apply a job. 
-- send request to application table (under secondary table in backend)
-- if user is a "talent", application status - immediate set to pending.
-- code somewhere under handleSubmit, to set application status to pending.